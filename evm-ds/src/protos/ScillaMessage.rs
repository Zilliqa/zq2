// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ScillaMessage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ProtoScillaVal {
    // message oneof groups
    pub ValType: ::std::option::Option<ProtoScillaVal_oneof_ValType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtoScillaVal {
    fn default() -> &'a ProtoScillaVal {
        <ProtoScillaVal as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ProtoScillaVal_oneof_ValType {
    bval(::bytes::Bytes),
    mval(ProtoScillaVal_Map),
}

impl ProtoScillaVal {
    pub fn new() -> ProtoScillaVal {
        ::std::default::Default::default()
    }

    // bytes bval = 1;


    pub fn get_bval(&self) -> &[u8] {
        match self.ValType {
            ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_bval(&mut self) {
        self.ValType = ::std::option::Option::None;
    }

    pub fn has_bval(&self) -> bool {
        match self.ValType {
            ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bval(&mut self, v: ::bytes::Bytes) {
        self.ValType = ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bval(&mut self) -> &mut ::bytes::Bytes {
        if let ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(_)) = self.ValType {
        } else {
            self.ValType = ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(::bytes::Bytes::new()));
        }
        match self.ValType {
            ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bval(&mut self) -> ::bytes::Bytes {
        if self.has_bval() {
            match self.ValType.take() {
                ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(v)) => v,
                _ => panic!(),
            }
        } else {
            ::bytes::Bytes::new()
        }
    }

    // .ProtoScillaVal.Map mval = 2;


    pub fn get_mval(&self) -> &ProtoScillaVal_Map {
        match self.ValType {
            ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(ref v)) => v,
            _ => <ProtoScillaVal_Map as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_mval(&mut self) {
        self.ValType = ::std::option::Option::None;
    }

    pub fn has_mval(&self) -> bool {
        match self.ValType {
            ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mval(&mut self, v: ProtoScillaVal_Map) {
        self.ValType = ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mval(&mut self) -> &mut ProtoScillaVal_Map {
        if let ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(_)) = self.ValType {
        } else {
            self.ValType = ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(ProtoScillaVal_Map::new()));
        }
        match self.ValType {
            ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mval(&mut self) -> ProtoScillaVal_Map {
        if self.has_mval() {
            match self.ValType.take() {
                ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(v)) => v,
                _ => panic!(),
            }
        } else {
            ProtoScillaVal_Map::new()
        }
    }
}

impl ::protobuf::Message for ProtoScillaVal {
    fn is_initialized(&self) -> bool {
        if let Some(ProtoScillaVal_oneof_ValType::mval(ref v)) = self.ValType {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ValType = ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::bval(is.read_carllerche_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ValType = ::std::option::Option::Some(ProtoScillaVal_oneof_ValType::mval(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ValType {
            match v {
                &ProtoScillaVal_oneof_ValType::bval(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &ProtoScillaVal_oneof_ValType::mval(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.ValType {
            match v {
                &ProtoScillaVal_oneof_ValType::bval(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &ProtoScillaVal_oneof_ValType::mval(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtoScillaVal {
        ProtoScillaVal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "bval",
                ProtoScillaVal::has_bval,
                ProtoScillaVal::get_bval,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProtoScillaVal_Map>(
                "mval",
                ProtoScillaVal::has_mval,
                ProtoScillaVal::get_mval,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtoScillaVal>(
                "ProtoScillaVal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtoScillaVal {
        static instance: ::protobuf::rt::LazyV2<ProtoScillaVal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtoScillaVal::new)
    }
}

impl ::protobuf::Clear for ProtoScillaVal {
    fn clear(&mut self) {
        self.ValType = ::std::option::Option::None;
        self.ValType = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtoScillaVal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoScillaVal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProtoScillaVal_Map {
    // message fields
    pub m: ::std::collections::HashMap<::protobuf::Chars, ProtoScillaVal>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtoScillaVal_Map {
    fn default() -> &'a ProtoScillaVal_Map {
        <ProtoScillaVal_Map as ::protobuf::Message>::default_instance()
    }
}

impl ProtoScillaVal_Map {
    pub fn new() -> ProtoScillaVal_Map {
        ::std::default::Default::default()
    }

    // repeated .ProtoScillaVal.Map.MEntry m = 1;


    pub fn get_m(&self) -> &::std::collections::HashMap<::protobuf::Chars, ProtoScillaVal> {
        &self.m
    }
    pub fn clear_m(&mut self) {
        self.m.clear();
    }

    // Param is passed by value, moved
    pub fn set_m(&mut self, v: ::std::collections::HashMap<::protobuf::Chars, ProtoScillaVal>) {
        self.m = v;
    }

    // Mutable pointer to the field.
    pub fn mut_m(&mut self) -> &mut ::std::collections::HashMap<::protobuf::Chars, ProtoScillaVal> {
        &mut self.m
    }

    // Take field
    pub fn take_m(&mut self) -> ::std::collections::HashMap<::protobuf::Chars, ProtoScillaVal> {
        ::std::mem::replace(&mut self.m, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ProtoScillaVal_Map {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeCarllercheChars, ::protobuf::types::ProtobufTypeMessage<ProtoScillaVal>>(wire_type, is, &mut self.m)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeCarllercheChars, ::protobuf::types::ProtobufTypeMessage<ProtoScillaVal>>(1, &self.m);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeCarllercheChars, ::protobuf::types::ProtobufTypeMessage<ProtoScillaVal>>(1, &self.m, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtoScillaVal_Map {
        ProtoScillaVal_Map::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars, ::protobuf::types::ProtobufTypeMessage<ProtoScillaVal>>(
                "m",
                |m: &ProtoScillaVal_Map| { &m.m },
                |m: &mut ProtoScillaVal_Map| { &mut m.m },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtoScillaVal_Map>(
                "ProtoScillaVal.Map",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtoScillaVal_Map {
        static instance: ::protobuf::rt::LazyV2<ProtoScillaVal_Map> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtoScillaVal_Map::new)
    }
}

impl ::protobuf::Clear for ProtoScillaVal_Map {
    fn clear(&mut self) {
        self.m.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtoScillaVal_Map {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoScillaVal_Map {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProtoScillaQuery {
    // message fields
    pub name: ::protobuf::Chars,
    pub mapdepth: u32,
    pub indices: ::std::vec::Vec<::bytes::Bytes>,
    pub ignoreval: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtoScillaQuery {
    fn default() -> &'a ProtoScillaQuery {
        <ProtoScillaQuery as ::protobuf::Message>::default_instance()
    }
}

impl ProtoScillaQuery {
    pub fn new() -> ProtoScillaQuery {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    // uint32 mapdepth = 2;


    pub fn get_mapdepth(&self) -> u32 {
        self.mapdepth
    }
    pub fn clear_mapdepth(&mut self) {
        self.mapdepth = 0;
    }

    // Param is passed by value, moved
    pub fn set_mapdepth(&mut self, v: u32) {
        self.mapdepth = v;
    }

    // repeated bytes indices = 3;


    pub fn get_indices(&self) -> &[::bytes::Bytes] {
        &self.indices
    }
    pub fn clear_indices(&mut self) {
        self.indices.clear();
    }

    // Param is passed by value, moved
    pub fn set_indices(&mut self, v: ::std::vec::Vec<::bytes::Bytes>) {
        self.indices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_indices(&mut self) -> &mut ::std::vec::Vec<::bytes::Bytes> {
        &mut self.indices
    }

    // Take field
    pub fn take_indices(&mut self) -> ::std::vec::Vec<::bytes::Bytes> {
        ::std::mem::replace(&mut self.indices, ::std::vec::Vec::new())
    }

    // bool ignoreval = 4;


    pub fn get_ignoreval(&self) -> bool {
        self.ignoreval
    }
    pub fn clear_ignoreval(&mut self) {
        self.ignoreval = false;
    }

    // Param is passed by value, moved
    pub fn set_ignoreval(&mut self, v: bool) {
        self.ignoreval = v;
    }
}

impl ::protobuf::Message for ProtoScillaQuery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mapdepth = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_carllerche_bytes_into(wire_type, is, &mut self.indices)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignoreval = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.mapdepth != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mapdepth, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.indices {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if self.ignoreval != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.mapdepth != 0 {
            os.write_uint32(2, self.mapdepth)?;
        }
        for v in &self.indices {
            os.write_bytes(3, &v)?;
        };
        if self.ignoreval != false {
            os.write_bool(4, self.ignoreval)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtoScillaQuery {
        ProtoScillaQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "name",
                |m: &ProtoScillaQuery| { &m.name },
                |m: &mut ProtoScillaQuery| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mapdepth",
                |m: &ProtoScillaQuery| { &m.mapdepth },
                |m: &mut ProtoScillaQuery| { &mut m.mapdepth },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "indices",
                |m: &ProtoScillaQuery| { &m.indices },
                |m: &mut ProtoScillaQuery| { &mut m.indices },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignoreval",
                |m: &ProtoScillaQuery| { &m.ignoreval },
                |m: &mut ProtoScillaQuery| { &mut m.ignoreval },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtoScillaQuery>(
                "ProtoScillaQuery",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtoScillaQuery {
        static instance: ::protobuf::rt::LazyV2<ProtoScillaQuery> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtoScillaQuery::new)
    }
}

impl ::protobuf::Clear for ProtoScillaQuery {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
        self.mapdepth = 0;
        self.indices.clear();
        self.ignoreval = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtoScillaQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoScillaQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13ScillaMessage.proto\"\xd4\x01\n\x0eProtoScillaVal\x12\x14\n\x04bva\
    l\x18\x01\x20\x01(\x0cH\0R\x04bval\x12)\n\x04mval\x18\x02\x20\x01(\x0b2\
    \x13.ProtoScillaVal.MapH\0R\x04mval\x1av\n\x03Map\x12(\n\x01m\x18\x01\
    \x20\x03(\x0b2\x1a.ProtoScillaVal.Map.MEntryR\x01m\x1aE\n\x06MEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12%\n\x05value\x18\x02\x20\x01\
    (\x0b2\x0f.ProtoScillaValR\x05value:\x028\x01B\t\n\x07ValType\"z\n\x10Pr\
    otoScillaQuery\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1a\n\
    \x08mapdepth\x18\x02\x20\x01(\rR\x08mapdepth\x12\x18\n\x07indices\x18\
    \x03\x20\x03(\x0cR\x07indices\x12\x1c\n\tignoreval\x18\x04\x20\x01(\x08R\
    \tignorevalb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
